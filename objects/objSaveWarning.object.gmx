<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGUITitle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lots of stuff

// Align BG
scr_bgCentre();

global.titleScreen = 1;
    
if (os_type == os_ios || os_type == os_android) {
    alarm[0] = 2;
    }
// Release click if user is holding on screen
if mouse_check_button_pressed(mb_left){
    mouse_clear(mb_left);
    }
if keyboard_check_pressed(ord("C")) {
    keyboard_clear(ord("C"));
    }
if keyboard_check_pressed(global.xKey) {
    keyboard_clear(global.xKey);
    }
if !keyboard_check(global.xKey) {
    global.mbleftPressed = 0;
    }
if gamepad_button_check(global.whichPad,global.xButton) || gamepad_button_check(global.whichPad,global.trButton) {
    global.mbleftPressed = 1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start fadeout
if !instance_exists(objFadeOutNew) {
    instance_create(0,0,objFadeOutNew);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete save (start over)
if file_exists("home_save01.ini") {
    file_delete("home_save01.ini");
    }
alarm[4] = 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add/remove gamepad UI if pad plugged in/removed

if (os_type == os_windows || os_type == os_macosx) {
    // Gamepad is plugged in
    if global.forceInput &gt;= 1 {
        if !instance_exists(objButtonB) { // Go Back
            instance_create((global.width*0.28),(global.height*0.86),objButtonB);
            }
        if !instance_exists(objButtonY) { // Start Over
            instance_create((global.width*0.67),(global.height*0.86),objButtonY);
            }
        }
    // Gamepad is removed
    if global.forceInput &lt; 1 {
        if instance_exists(objButtonB) { // Continue
            with objButtonB {
                instance_destroy();
                }
            }
        if instance_exists(objButtonY) { // Start Over
            with objButtonY {
                instance_destroy();
                }
            }
        }
    }
    
// Reset this check
alarm[2] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Release mbleftpressed
global.mbleftPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create virtual keys for this screen (iOS)

global.mobResetN = virtual_key_add(0,0,round(global.width*0.48),global.height,ord('N'));
global.mobResetY = virtual_key_add(round(global.width*0.54),0,round(global.width*0.48),global.height,ord('Y'));
    
/*
if os_device == device_ios_ipad_retina {
    global.mobResetN = virtual_key_add(0,1134,990,402,ord('N'));
    global.mobResetY = virtual_key_add(1062,1134,987,402,ord('Y'));
    }
if os_device == device_ios_ipad {
    global.mobResetN = virtual_key_add(0,567,495,201,ord('N'));
    global.mobResetY = virtual_key_add(531,567,493,201,ord('Y'));
    }
if (os_device == device_ios_iphone5) {
    global.mobResetN = virtual_key_add(0,445,568,195,ord('N'));
    global.mobResetY = virtual_key_add(568,445,568,195,ord('Y'));
    }
if os_device == device_ios_iphone_retina {
    global.mobResetN = virtual_key_add(0,445,512,195,ord('N'));
    global.mobResetY = virtual_key_add(512,445,512,195,ord('Y'));
    }
if (os_device == device_ios_iphone || os_device == device_ios_unknown) {
    global.mobResetN = virtual_key_add(0,240,240,80,ord("C"));
    global.mobResetY = virtual_key_add(240,240,240,80,vk_space);
    }
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Button Releases
//if (os_type == os_windows || os_type == os_macosx) {
    if keyboard_check_released(global.xKey) || gamepad_button_check_released(global.whichPad,global.xButton) || gamepad_button_check_released(global.whichPad,global.trButton) || keyboard_check_released(ord("Y")) {
        global.mbleftPressed = 0;
        }
    if !keyboard_check(global.xKey) &amp;&amp; !gamepad_button_check(global.whichPad,global.xButton) &amp;&amp; !gamepad_button_check(global.whichPad,global.trButton) &amp;&amp; !keyboard_check(ord("Y")) {
        if alarm[1] = -1 {
            global.mbleftPressed = 0;
            }
        }
//    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Buttons / Taps

var pushYes = 0;
var pushNo = 0;
pushYes = max(keyboard_check_pressed(ord("Y")),gamepad_button_check_pressed(global.whichPad,global.trButton),0); 
pushNo = max(keyboard_check_pressed(ord("N")),gamepad_button_check_pressed(global.whichPad,global.crButton),0);

if global.mbleftPressed == 0 {
    // Choose "No"
    if pushNo == 1 {
        global.mbLeftPressed = 1;
        switch os_type {
            case os_windows: global.fadeTo = mainTitle; break;
            case os_macosx: global.fadeTo = mainTitle; break;
            case os_ios: global.fadeTo = mainTitle; break;
            case os_ps4: global.fadeTo = mainTitle; break;
            case os_psvita: global.fadeTo = mainTitle; break;
            }
        alarm[4] = 2;
        }
    
    // Choose "Yes"
    if pushYes == 1 {
        // Reset global variables
        globalvars_reset();
        global.gameSaved = 0;
        global.fadeTo = saveNotes;
        if os_type == os_windows || os_type == os_macosx || os_type == os_ios {
            alarm[3] = 1; // Delete save file
            }
        global.mbleftPressed = 1;
        // Re-start trophies
        if os_type == os_ps4 || os_type == os_psvita {
            if instance_exists(oControl) {
                oControl.alarm[2] = 4;
                }
            if instance_exists(objPSSaver) {
                // Reset save
                objPSSaver.alarm[5] = 2;
                }
            alarm[4] = 1;
            }
        }
    }
// Releases
if global.mbleftPressed == 1 {
    if gamepad_button_check_released(global.whichPad,global.xButton) || gamepad_button_check_released(global.whichPad,global.crButton) || gamepad_button_check_released(global.whichPad,global.sqButton) || gamepad_button_check_released(global.whichPad,global.trButton) || mouse_check_button_released(mb_left) || keyboard_check_released(ord("C")) || keyboard_check_released(global.xKey) {
        alarm[1] = 6;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the virtual keys
if os_type == os_ios || os_type == os_android {
    virtual_key_delete(global.mobResetN);
    virtual_key_delete(global.mobResetY);
    // Check for held keys
    if keyboard_check(ord("N")) {
        global.mbleftPressed = 1;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw titles, prompts

// Smooth fonts
texture_set_interpolation(true);

//// Text
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// Warning text
draw_set_font(global.fntTitles);
draw_text_ext_color((global.width*0.2),(global.height*0.26),global.gui_saveWarning,global.lll,global.width*0.72,global.wh,global.wh,global.wh,global.wh,1);
        
//// Prompts
draw_set_halign(fa_center);

// Special for iOS
if os_type == os_ios {
    // "No, GO BACK"
    draw_set_font(global.fntPrompt);
    draw_text_color((global.width * 0.3)+2,(global.height * 0.83)+2,global.gui_saveWN,global.kk,global.kk,global.kk,global.kk,1);
    draw_text_color((global.width * 0.3),(global.height * 0.83),global.gui_saveWN,global.rd,global.rd,global.rd,global.rd,1);
    // "START OVER"
    draw_text_color((global.width * 0.68)+2,(global.height * 0.83)+2,global.gui_saveWY,global.kk,global.kk,global.kk,global.kk,1);
    draw_text_color((global.width * 0.68),(global.height * 0.83),global.gui_saveWY,global.rd,global.rd,global.rd,global.rd,1);
    texture_set_interpolation(false);
    }

// All others
else {
    if global.forceInput &lt; 1 {
        // "No, GO BACK"
        draw_set_font(global.fntTitItal);
        draw_text_color((global.width * 0.3)+2,(global.height * 0.74)+2,global.gui_saveWN,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width * 0.3),(global.height * 0.74),global.gui_saveWN,global.g2,global.g2,global.g2,global.g2,1);
        // "START OVER"
        draw_text_color((global.width * 0.68)+2,(global.height * 0.74)+2,global.gui_saveWY,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width * 0.68),(global.height * 0.74),global.gui_saveWY,global.g2,global.g2,global.g2,global.g2,1);
        // N
        draw_set_font(global.fntBig);
        draw_text_color((global.width * 0.3)+2,(global.height * 0.83)+2,global.gui_no,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width * 0.3),(global.height * 0.83),global.gui_no,global.rd,global.rd,global.rd,global.rd,1);
        // Y
        draw_text_color((global.width * 0.68)+2,(global.height * 0.83)+2,global.gui_yes,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width * 0.68),(global.height * 0.83),global.gui_yes,global.rd,global.rd,global.rd,global.rd,1);
        texture_set_interpolation(false);
        }
    if global.forceInput &gt;= 1 {
        // Continue?
        draw_set_font(global.fntTitItal);
        draw_text_color((global.width * 0.3)+2,(global.height * 0.74)+2,global.gui_saveWN,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width * 0.3),(global.height * 0.74),global.gui_saveWN,global.g2,global.g2,global.g2,global.g2,1);
        // Start Over?
        draw_text_color((global.width * 0.68)+2,(global.height * 0.74)+2,global.gui_saveWY,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width * 0.68),(global.height * 0.74),global.gui_saveWY,global.g2,global.g2,global.g2,global.g2,1);
        // Smooth fonts
        texture_set_interpolation(false);
        // B / Circle
        draw_sprite_ext(global.crSpr[global.ui],0,global.width*0.28,global.height*0.86,global.butScale,global.butScale,0,c_white,1);
        // Y / Triangle
        draw_sprite_ext(global.trSpr[global.ui],0,global.width*0.67,global.height*0.86,global.butScale,global.butScale,0,c_white,1);
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Prevent sprite draw
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
