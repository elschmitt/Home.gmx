<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMainTitleRet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9997</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lots of stuff

// Align BG
scr_bgCentre();

// Initialize textbox script
diag_init();

if instance_exists(objPlayer) {
    objPlayer.visible = false;
    }
if instance_exists(objFlashlight) {
    objFlashlight.visible = false;
    }

var MobSave;
MobSave = 0;
globalvar mobContinue;
globalvar mobStartOver;
conKeysShown = 0;
global.titleScreen = 1;
image_speed = 0;

x = round(global.width/2);
y = round(global.height*0.4);

if !keyboard_check(global.xKey) || !keyboard_check(ord("N")) {
    global.mbleftPressed = 0;
    }
    
if (os_type == os_ios || os_type == os_android) {
    alarm[0] = 2;
    MobSave = 1;
    if keyboard_check_pressed(ord("N")) || keyboard_check(ord("N")){
        global.mbleftPressed = 1;
        }
    }
    
audio_master_gain(6);
    
// Scale the main title
if os_type == os_windows || os_type == os_macosx || os_type == os_ps4 {
    image_xscale = 0.85;
    image_yscale = image_xscale;
    }    
if os_type == os_psvita {
    image_xscale = 0.5;
    image_yscale = image_xscale;
    }
if os_type == os_ios {
    if sprite_width &lt; global.width {
        image_xscale = 1;
        }
    if sprite_width &gt;= global.width {
        image_xscale = ((global.width/1.25)/sprite_width);
        }
    image_yscale = image_xscale;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start fadeout
if !instance_exists(objFadeOutNew) {
    instance_create(0,0,objFadeOutNew);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// loadtype
loadType = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add/remove gamepad UI if pad plugged in/removed

if (os_type == os_windows || os_type == os_macosx) {
    // Gamepad is plugged in
    if global.forceInput &gt;= 1 {
        if !file_exists("home_save01.ini") {
            if !instance_exists(objButtonA) {
                instance_create((global.width*0.53),(global.height*0.86),objButtonA);
                }
            }
        if file_exists("home_save01.ini") {
            if !instance_exists(objButtonX) { // Continue
                instance_create((global.width*0.28),(global.height*0.86),objButtonX);
                }
            if !instance_exists(objButtonA) { // Start Over
                instance_create((global.width*0.67),(global.height*0.86),objButtonA);
                }
            }
        }
    // Gamepad is removed
    if global.forceInput &lt; 1 {
        if instance_exists(objButtonX) { // Continue
            with objButtonX {
                instance_destroy();
                }
            }
        if instance_exists(objButtonA) { // Start Over
            with objButtonA {
                instance_destroy();
                }
            }
        }
    }
    
// Reset this check
alarm[2] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// release mbleftpressed
global.mbleftPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create virtual keys for this screen (iOS)

if !file_exists("home_save01.ini") {
    saveExists = 0;
    }
if file_exists("home_save01.ini") {
    global.mobContinue = virtual_key_add(0,0,round(global.width*0.48),global.height,ord("C"));
    global.mobStartOver = virtual_key_add(round(global.width*0.54),0,round(global.width*0.48),global.height,vk_space);
    conKeysShown = 1;
    }
    
    
/*
if (os_device == device_ios_ipad_retina) {
    global.mobContinue = virtual_key_add(0,1134,990,402,ord("C"));
    global.mobStartOver = virtual_key_add(1062,1134,987,402,vk_space);
    conKeysShown = 1;
    }
if (os_device == device_ios_ipad) {
    global.mobContinue = virtual_key_add(0,567,495,201,ord("C"));
    global.mobStartOver = virtual_key_add(531,567,493,201,vk_space);
    conKeysShown = 1;
    }
if (os_device == device_ios_iphone5) {
    global.mobContinue = virtual_key_add(0,445,568,195,ord("C"));
    global.mobStartOver = virtual_key_add(568,445,568,195,vk_space);
    conKeysShown = 1;
    }
if (os_device == device_ios_iphone_retina) {
    global.mobContinue = virtual_key_add(0,445,512,195,ord("C"));
    global.mobStartOver = virtual_key_add(512,445,512,195,vk_space);
    conKeysShown = 1;
    }
if (os_device == device_ios_iphone || os_device == device_ios_unknown) {
    global.mobContinue = virtual_key_add(0,240,240,80,ord("C"));
    global.mobStartOver = virtual_key_add(240,240,240,80,vk_space);
    conKeysShown = 1;
    }
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check buttons / taps

var pushStartNew = 0;
var pushContinue = 0;
var pushStartOver = 0;

pushContinue = max(keyboard_check_pressed(ord("C")),gamepad_button_check_pressed(global.whichPad,global.sqButton),0); 
pushStartOver = max(keyboard_check_pressed(global.xKey),gamepad_button_check_pressed(global.whichPad,global.trButton),0);
pushStartNew = max(keyboard_check_pressed(global.xKey),gamepad_button_check_pressed(global.whichPad,global.xButton),mouse_check_button_pressed(mb_left),0);

var saveExists = 0;
if os_type == os_windows || os_type == os_macosx || os_type == os_ios {
    if !file_exists("home_save01.ini") {
        saveExists = 0;
        }
    if file_exists("home_save01.ini") {
        saveExists = 1;
        }
    }
if os_type == os_ps4 || os_type == os_psvita {
    if global.gameSaved == 0 {
        saveExists = 0;
        }
    if global.gameSaved == 1 {
        saveExists = 1;
        }
    }

if global.mbleftPressed == 0 {
    // Check for saved game
    if saveExists == 1 {
        if pushStartOver == 1 { // Start Over
            global.mbleftPressed = 1;
            global.gameLoaded = 0;
            global.fadeTo = saveWarning;
            alarm[4] = 2;
            }
        if pushContinue == 1 { // Continue
            // Kill the intro music
            audio_stop_sound(sndAMBHome);
            global.mbleftPressed = 1;
            global.gameLoaded = 1;
            global.fadeTo = setView2;
            alarm[4] = 2;
            }
    }
    if saveExists == 0 {
        if pushStartNew == 1 {
            global.mbleftPressed = 1;
            global.fadeTo = saveNotes;
            alarm[4] = 2;
            }
        }
    }
// Releases
if global.mbleftPressed == 1 {
    if gamepad_button_check_released(global.whichPad,global.xButton) || gamepad_button_check_released(global.whichPad,global.crButton) || gamepad_button_check_released(global.whichPad,global.sqButton) || gamepad_button_check_released(global.whichPad,global.trButton) || mouse_check_button_released(mb_left) || keyboard_check_released(ord("C")) || keyboard_check_released(global.xKey) {
        alarm[1] = 6;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the virtual keys
if (os_type == os_ios || os_type == os_android) {
    if conKeysShown == 1 {
        virtual_key_delete(global.mobContinue);
        virtual_key_delete(global.mobStartOver);
        }
    }
if instance_exists(objPlayer) {
    with (objPlayer) {
        instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw logo, prompts

// Smooth fonts
texture_set_interpolation(true);

// Draw sprite
draw_set_alpha(1);
draw_self();

// Draw version number
draw_set_halign(fa_right);
draw_set_font(global.fntVer);
draw_text_colour(global.width-64,display_get_gui_height()-64,string("v")+string(global.curVer),c_white,c_white,c_white,c_white,1);

draw_set_halign(fa_center);

var saveExists;
if os_type == os_windows || os_type == os_macosx || os_type == os_ios {
    if !file_exists("home_save01.ini") {
        saveExists = 0;
        }
    if file_exists("home_save01.ini") {
        saveExists = 1;
        }
    }
if os_type == os_ps4 || os_type == os_psvita {
    if global.gameSaved == 0 {
        saveExists = 0;
        }
    if global.gameSaved == 1 {
        saveExists = 1;
        }
    }

if global.forceInput &lt; 1 {
    // Special for iOS
    if os_type == os_ios {
        draw_set_font(global.fntPrompt);
        if saveExists == 0 {
            draw_text_color((global.width / 2)+2,(global.height * 0.83)+2,global.gui_continuePC,global.kk,global.kk,global.kk,global.kk,1);
            draw_text_color((global.width / 2),(global.height * 0.83),global.gui_continuePC,global.rd,global.rd,global.rd,global.rd,1);        
            }
        if saveExists == 1 {
            // Continue?
            draw_text_color((global.width * 0.3)+2,(global.height * 0.83)+2,global.gui_mainSave1,global.kk,global.kk,global.kk,global.kk,1);
            draw_text_color((global.width * 0.3),(global.height * 0.83),global.gui_mainSave1,global.rd,global.rd,global.rd,global.rd,1);
            // Start Over?
            draw_text_color((global.width * 0.68)+2,(global.height * 0.83)+2,global.gui_mainSave2,global.kk,global.kk,global.kk,global.kk,1);
            draw_text_color((global.width * 0.68),(global.height * 0.83),global.gui_mainSave2,global.rd,global.rd,global.rd,global.rd,1);
            }
        }
    // For others
    else {
        if saveExists == 0 {
            draw_set_font(global.fntPrompt);
            draw_text_color((global.width / 2)+2,(global.height * 0.86)+2,global.gui_continuePC,global.kk,global.kk,global.kk,global.kk,1);
            draw_text_color((global.width / 2),(global.height * 0.86),global.gui_continuePC,global.rd,global.rd,global.rd,global.rd,1);        
            }
        if saveExists == 1 {
            draw_set_font(global.fntTitItal);
            // Continue?
            draw_text_color((global.width * 0.3)+2,(global.height * 0.74)+2,global.gui_mainSave1,global.kk,global.kk,global.kk,global.kk,1);
            draw_text_color((global.width * 0.3),(global.height * 0.74),global.gui_mainSave1,global.g2,global.g2,global.g2,global.g2,1);
            // Start Over?
            draw_text_color((global.width * 0.68)+2,(global.height * 0.74)+2,global.gui_mainSave2,global.kk,global.kk,global.kk,global.kk,1);
            draw_text_color((global.width * 0.68),(global.height * 0.74),global.gui_mainSave2,global.g2,global.g2,global.g2,global.g2,1);
            // "C"
            draw_set_font(global.fntBig);
            draw_text_color((global.width * 0.3)+2,(global.height * 0.83)+2,global.gui_mainSave1p,global.kk,global.kk,global.kk,global.kk,1);
            draw_text_color((global.width * 0.3),(global.height * 0.83),global.gui_mainSave1p,global.rd,global.rd,global.rd,global.rd,1);
            // "SPACE"
            draw_text_color((global.width * 0.68)+2,(global.height * 0.83)+2,global.gui_mainSave2p,global.kk,global.kk,global.kk,global.kk,1);
            draw_text_color((global.width * 0.68),(global.height * 0.83),global.gui_mainSave2p,global.rd,global.rd,global.rd,global.rd,1);
            }
        }
    }
if global.forceInput &gt;= 1 {
    if saveExists == 0 {
        // A / X
        texture_set_interpolation(false);
        draw_sprite_ext(global.xSpr[global.ui],0,global.width*0.54,global.height*0.86,global.butScale,global.butScale,0,c_white,1);
        texture_set_interpolation(true);
        draw_set_font(global.fntPrompt);
        draw_text_color((global.width / 2)+2,(global.height * 0.86)+2,global.gui_continuePCX,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width / 2),(global.height * 0.86),global.gui_continuePCX,global.rd,global.rd,global.rd,global.rd,1);        
        }
    if saveExists == 1 {
        draw_set_font(global.fntTitItal);
        // Continue?
        draw_text_color((global.width * 0.3)+2,(global.height * 0.74)+2,global.gui_mainSave1,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width * 0.3),(global.height * 0.74),global.gui_mainSave1,global.g2,global.g2,global.g2,global.g2,1);
        // Start Over?
        draw_text_color((global.width * 0.68)+2,(global.height * 0.74)+2,global.gui_mainSave2,global.kk,global.kk,global.kk,global.kk,1);
        draw_text_color((global.width * 0.68),(global.height * 0.74),global.gui_mainSave2,global.g2,global.g2,global.g2,global.g2,1);
        texture_set_interpolation(false);
        // X / Square
        draw_sprite_ext(global.sqSpr[global.ui],0,global.width*0.28,global.height*0.86,global.butScale,global.butScale,0,c_white,1);
        // Y / Triangle
        draw_sprite_ext(global.trSpr[global.ui],0,global.width*0.67,global.height*0.86,global.butScale,global.butScale,0,c_white,1);
        }
    }

// Stop smoothing
texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove redundant draw
draw_background_ext(bgTitles,global.width/2,global.height/2,4,4,0,c_white,1);
//draw_background(bgTitles,global.width/2,global.height/2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>176,96</point>
    <point>176,176</point>
  </PhysicsShapePoints>
</object>
