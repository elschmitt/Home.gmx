<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCTRL2</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  Change application surface and resize views

// Start Marking Title Screens
global.titleScreen = 0;

// Removed below for testing

    
alarm[0] = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to next room (per platform)
if (os_type == os_ios || os_type == os_android) {
    //room_goto(varLoadMob);
    room_goto(logoTitle);
    }
if (os_type == os_windows || os_type == os_macosx) {
    room_goto(logoTitle);
    }
if (os_type == os_ps4 || os_type == os_psvita) {
    room_goto(logoTitle);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Track gamepads (for setup room only)

show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
case "gamepad discovered":                     // A game pad has been discovered
    var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
    global.gpOn += 1;
    break;
case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
    var pad = async_load[? "pad_index"];       // Get the pad index
    if global.gpOn &gt; 0 {
        global.gpOn -= 1;
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill player (not sure why!?)
if instance_exists(objPlayer) {
    with objPlayer {
        instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial surface resize per-platform

globalvar mainWW, mainHH, uu, Xoffset, Yoffset, Xcentre, Ycentre, rr, uiOffY1, uiOffY2, screenRes;
global.uiOffY1 = 0;
global.uiOffY2 = 0;
global.screenRes = 1080;
if (os_type == os_ios) {
    global.width = display_get_width();
    // adjust for tall ratios
    if display_get_width() / display_get_height() &lt;= 1.5 {
        global.height = round(round(1080*global.width)/1920);
        }
    else {
        global.height = display_get_height();
        }
    uu = 1;
    view_xview[0] = 0;
    view_yview[0] = 0;
    view_wport[0] = display_get_width();
    view_hport[0] = display_get_height();
    display_set_gui_size(global.width,global.height);
    global.Xcentre = global.width - (global.width/2);
    global.Ycentre = global.height - (global.height/2);
    }
if (os_type == os_ps4) {
    global.width = 1920;
    global.height = 1080;
    uu = 1;
    display_set_gui_size(1920,1080);
    global.Xcentre = global.width - (global.width/2);
    global.Ycentre = global.height - (global.height/2);
    }
if (os_type == os_psvita) {
    global.width = 960;
    global.height = 544;
    view_xview[0] = 0;
    view_yview[0] = 0;
    view_wport[0] = 960;
    view_hport[0] = 544;
    display_set_gui_size(960,544);
    global.Xcentre = global.width - (global.width/2);
    global.Ycentre = global.height - (global.height/2);
    uu = 1;
    }

// Initial Application Surface size (PC &amp; Mac)
if (os_type == os_windows || os_type == os_macosx) {
    global.width = 1920;
    global.height = 1080;
    uu = 1;
    display_set_gui_size(1920,1080);
    global.Xcentre = global.width - (global.width/2);
    global.Ycentre = global.height - (global.height/2);
    // Enable vsync (if possible)
    if display_aa &gt;= 6 {
        display_reset(2, true); 
        }
    if display_aa &lt; 6 {
        display_reset(2, false); 
        }
    }

// Initial Application Surface size
surface_resize(application_surface,global.width,global.height);
global.screenRatio = (round(global.width/global.height));
global.device_w=display_get_width();
global.device_h=display_get_height();
global.deviceViewChange = 1;
    
// Enable SWF AA!
draw_enable_swf_aa(true);
draw_set_swf_aa_level(0.5);

// Kill all sounds (in case of restart)
//audio_stop_all();

// set gain
audio_master_gain(6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
