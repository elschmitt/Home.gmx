<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_diag_continue</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up vars, reset stuff
global.pauseTimeout = 2;
/*if os_type == os_ios {
    diag_steps = 1;
    diag_font = font_diag;
    diag_color = c_white;
    diag_sep = 18;
    diag_result = -1;
    }*/

checkPads = 0;
alarm[0] = 1;           // Deactivate the other instances in the next time step
chars_shown = 0;        // Number of characters to show
alarm[1] = diag_steps;  // When an additional character should be shown
alarm[2] = 12;          // Draw the virtual keys
alarm[5] = 15;          // Declare item/trigger as "clicked" (for gamepad support)
downKeyShown = 0;
YNKeyShown = 0;
skipKeysShown = 0;
global.textBoxOn = 1;
downReady = 0;
pressRight = 0;
image_xscale = 4;
image_yscale = 4;
if (os_type == os_ios || os_type == os_android) {
    global.dialogOn = 1;
    room_speed = 35;
    }
if (os_type == os_ps4 || os_type == os_psvita) {
    room_speed = 30;
    }
if keyboard_check_pressed(global.xKey) || keyboard_check_pressed(global.downKey) || keyboard_check_pressed(global.downKey2) || mouse_check_button(mb_left) || mouse_check_button(mb_right) {
    global.mbleftPressed = 1;
    }
if (os_type == os_windows) || (os_type == os_macosx) {
    room_speed = 30;
    if gamepad_axis_value(0,gp_axislv) &gt; 0 {
        global.stickDownPressed = 1;
        }
    if gamepad_axis_value(0,gp_axislh) &gt; 0 {
        global.stickRightPressed = 1;
        }
  }
alarm[10] = 15; // Cue rumble kill
  
// Kill fade just in case
if instance_exists(objFadeOutNew) {
    with (objFadeOutNew) {
        instance_destroy();
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete virtual keys, reset textbox
if (os_type == os_ios) {
    if downKeyShown == 1 {
        virtual_key_delete(global.mobDown);
        }
    if YNKeyShown == 1 {
        virtual_key_delete(global.mobY);
        virtual_key_delete(global.mobN);
        }
    }
    
if global.triggerOn == 1 {
    global.triggerOn = 0;
    global.face1pressed = 2;
    }
global.textBoxOn = 3;
global.itemClicked = 0;
global.stickRightPressed = 0;
room_speed = 30;
global.pauseTimeout = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Window Resize

scr_winMode();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop rumbling
if global.forceInput &gt;= 1 {
    if gamepad_is_connected(global.whichPad) {
        gamepad_set_vibration(global.whichPad,0,0);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset numclick, doubleclick
global.numClick = 0;
global.doubleClick = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Face1
global.face1pressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset right stick
global.stickRightPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset down stick
global.stickDownPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// itemClicked
global.itemClicked = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset mbleftpressed
global.mbleftPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create mobile virtual keys on-screen

if os_type == os_windows || os_type == os_macosx || os_type == os_ios {
    // redundant measurements (copied from Draw)
    // Screen area
      var xx,yy,ww,hh;
      if global.deviceViewChange == 0 {
        xx = view_xview[0];
        yy = view_yview[0];
        ww = view_wview[0];
        hh = view_hview[0];
      }
      if global.deviceViewChange == 1 {
        xx = view_xview[1];
        yy = view_yview[1];
        ww = view_wview[1];
        hh = view_hview[1];
      }
    var hOff1, hOff2;
        if global.width / global.height &lt; 1.5 {
            hOff1 = 20;
            hOff2 = 63;
            }
        if global.width / global.height == 1.5 {
            hOff1 = 20;
            hOff2 = 63;
            }
        if global.width / global.height &gt; 1.5 {
            if global.width / global.height &lt; 2 {
                hOff1 = 40;
                hOff2 = 83;
                }
            if global.width / global.height &gt;= 2 {
                hOff1 = 20;
                hOff2 = 63;
                }
            }
    if (kind == 0) {
        global.mobDown = virtual_key_add(view_wview[global.deviceViewChange]-diag_hmargin-20,yy+diag_continue_y,55,55,vk_down);
        downKeyShown = 1;
        }
    else {
        global.mobY = virtual_key_add(view_wview[global.deviceViewChange]-diag_hmargin-hOff2-18,yy+diag_yes_y,66,55,ord('Y'));
        global.mobN = virtual_key_add(view_wview[global.deviceViewChange]-diag_hmargin-hOff1,yy+diag_no_y,77,55,ord('N'));
        YNKeyShown = 1;
        }
    }
    
/// OLD code
/*
if os_type == os_ios {
    if (kind == 0) {
        if (os_device == device_ios_ipad_retina) { // Down Key
            global.mobDown = virtual_key_add(1474,992,250,250,vk_down);
            downKeyShown = 1;
            }
        if (os_device == device_ios_ipad) {
            global.mobDown = virtual_key_add(737,496,125,125,vk_down);
            downKeyShown = 1;
            }
        if (os_device == device_ios_iphone5) {
            global.mobDown = virtual_key_add(791,409,107,144,vk_down);
            downKeyShown = 1;
            }
        if (os_device == device_ios_iphone_retina) {
            global.mobDown = virtual_key_add(725,433,125,125,vk_down);
            downKeyShown = 1;
            }
        if (os_device == device_ios_iphone || os_device == device_ios_unknown) {
            global.mobDown = virtual_key_add(352,216,77,55,vk_down);
            downKeyShown = 1;
            }
        if (os_type == os_android) {
            global.mobDown = virtual_key_add(864,470,112,112,vk_down);
            downKeyShown = 1;
            }
        }
    else {
        if (os_device == device_ios_ipad_retina) { // Yes/No Keys
            global.mobY = virtual_key_add(1224,1036,262,244,ord('Y'));
            global.mobN = virtual_key_add(1506,1036,286,244,ord('N'));
            YNKeyShown = 1;
            }
        if (os_device == device_ios_ipad) {
            global.mobY = virtual_key_add(612,518,131,122,ord('Y'));
            global.mobN = virtual_key_add(753,518,143,122,ord('N'));
            YNKeyShown = 1;
            }
        if (os_device == device_ios_iphone5 ) {
            global.mobY = virtual_key_add(683,409,105,144,ord('Y'));
            global.mobN = virtual_key_add(791,409,127,144,ord('N'));
            YNKeyShown = 1;
            }
        if (os_device == device_ios_iphone_retina) {
            global.mobY = virtual_key_add(588,433,131,122,ord('Y'));
            global.mobN = virtual_key_add(732,433,125,122,ord('N'));
            YNKeyShown = 1;
            }
        if (os_device == device_ios_iphone || os_device == device_ios_unknown) {
            global.mobY = virtual_key_add(286,216,66,55,ord('Y'));
            global.mobN = virtual_key_add(352,216,77,55,ord('N'));
            YNKeyShown = 1;
            }
        if (os_type == os_android) {
            global.mobY = virtual_key_add(764,512,83,48,ord('Y'));
            global.mobN = virtual_key_add(900,512,80,48,ord('N'));
            YNKeyShown = 1;
            }
        }
    }
    */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Alarm 3
alarm[3] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Extend the number of characters shown
{
  chars_shown += 1;
  alarm[1] = diag_steps;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deactivate all
instance_deactivate_all(true);
checkPads = 1;
global.numClick = 0;
global.doubleClick = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// redundant inputCheck
if checkPads == 1 {
    /// Input check
    if os_type == os_windows || os_type == os_macosx {
        if window_has_focus() {
            if !os_is_paused() {
                scr_inputCheck();
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls, blinking arrow

// Regulate blinkng speed of continue arrow
if room_speed == 30 {
    image_speed = 0.6;
    }
if room_speed == 35 {
    image_speed = 0.55;
    }
if room_speed == 60 {
    image_speed = 0.3;
    }

    var pressRight = 0;
    
// Advance text / Choose Yes/No
if os_type == os_windows || os_type == os_macosx || os_type == os_ps4 || os_type == os_psvita {
    if downReady == 0 {
        
        // Right
        if (gamepad_axis_value(global.whichPad,gp_axislh) &gt; 0.5) &amp;&amp; (global.stickRightPressed == 0) {
            global.stickRightPressed = 1;
            }
        pressRight = max(gamepad_button_check(global.whichPad,gp_padr),global.stickRightPressed,0);
        if pressRight == 1 {
            room_speed = 60;
            }
        if pressRight == 0 {
            room_speed = 30;
            }
        }
    if downReady == 1 {
        if global.forceInput &gt;= 1 {
            // A Button as dialogue skip
            if gamepad_button_check_pressed(global.whichPad,global.xButton) &amp;&amp; global.face1pressed == 0 {
                global.face1pressed = 1;
                if chars_shown &gt; 0 {
                    // Reset room speed in case user skipped text
                    room_speed = 30;
                    if (kind != 0) exit;
                    diag_result = 1;
                    instance_activate_all();
                    if (call_instance &gt;= 0) 
                        with (call_instance) event_perform(ev_other,other.call_event);
                        instance_destroy();
                        }
                    }
            {
            // Y Button
            if gamepad_button_check(global.whichPad,global.trButton) {
                room_speed = 30;
                if (kind != 1) exit;
                diag_result = 1;
                instance_activate_all();
                if (call_instance &gt;= 0) 
                    with (call_instance) event_perform(ev_other,other.call_event);
                        instance_destroy();
                        }
            {
            // B Button
            if gamepad_button_check(global.whichPad,global.crButton) {
                room_speed = 30;
                if (kind != 1) exit;
                diag_result = 0;
                instance_activate_all();
                if (call_instance &gt;= 0) 
                    with (call_instance) event_perform(ev_other,other.call_event);
                        instance_destroy();
                        }
                    }
                }
            }
        }
    // Stick releases
    if gamepad_axis_value(global.whichPad,gp_axislv) &lt;= 0.5 &amp;&amp; global.stickDownPressed == 1 {
        //alarm[6] = 7;
        global.stickDownPressed = 0;
        }
    if gamepad_axis_value(global.whichPad,gp_axislh) &lt;= 0.5 &amp;&amp; global.stickRightPressed == 1 {
        //alarm[7] = 7;
        global.stickRightPressed = 0;
        }
    if gamepad_button_check_released(global.whichPad,global.xButton) &amp;&amp; global.face1pressed == 1 {
        //alarm[8] = 7;
        global.face1pressed = 0;
        }
    }
    
if keyboard_check_released(global.xKey) || (keyboard_check_released(global.downKey) || keyboard_check_released(global.downKey2)) || mouse_check_button_released(mb_left) || mouse_check_button_released(mb_right) {
    alarm[4] = 7;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Track gamepads // redundant
if checkPads == 1 {

    show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
    show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.
    
    switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
    {
    case "gamepad discovered":                     // A game pad has been discovered
        var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
        global.gpOn += 1;
        break;
    case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
        var pad = async_load[? "pad_index"];       // Get the pad index
        if global.gpOn &gt; 0 {
            global.gpOn -= 1;
            }
        break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Nuke dialog, virtual keys
if global.dialogOn == 1 {
    global.dialogOn = 0;
    }
if (os_type == os_ios) {
    if downKeyShown == 1 {
        virtual_key_delete(global.mobDown);
        }
    if YNKeyShown == 1 {
        virtual_key_delete(global.mobY);
        virtual_key_delete(global.mobN);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// redundant debug
if checkPads == 1 {
    /// Debug text, etc.

    scr_debugText();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the dialog box, text, everything

{
  // Screen area
  var xx,yy,ww,hh;
  if global.deviceViewChange == 0 {
    xx = view_xview[0];
    yy = view_yview[0];
    ww = view_wview[0];
    hh = view_hview[0];
  }
  if global.deviceViewChange == 1 {
    xx = view_xview[1];
    yy = view_yview[1];
    ww = view_wview[1];
    hh = view_hview[1];
  }
  
  // Text area
  var txtx,txty,txtw,bgW;
  txtx = round(xx + diag_hmargin);
  txtw = ww - (2*diag_hmargin);
  txty = round(yy + diag_vmargin);
  bgW = background_get_width(diag_background);
  
  
  // Draw the background
  draw_background_stretched(bgFill,xx,yy,ww,hh);
  draw_background_ext(diag_background,xx+((round(ww/2))-(round(bgW*2))),yy,4,4,0,c_white,1);
  //draw_background_stretched(diag_background,xx,yy,ww,hh);
  
  // Draw the text
  var i,n,txt;
  draw_set_halign(fa_left);
  draw_set_valign(fa_top);
  draw_set_color(diag_color);
  draw_set_font(diag_font);
    // DEBUG
  //draw_text(xx+5,yy+5,string("yes_x: ")+string(diag_hmargin+diag_yes_x+32)+string("; no_x: ")+string(diag_hmargin+diag_no_x+32)+string("; bg: ")+string(((ww/2)-(bgW/2))));
  //draw_text(xx+5,yy+5,string("txtx: ")+string(txtx)+string("; wview: ")+string(view_wview[1])+string("; diag_h: ")+string(diag_hmargin)+string("; txtw: ")+string(txtw)+string("; ww: ")+string(ww));
  n = chars_shown;
  for (i = 0; i &lt;= lines; i+=1)
  {
    if (n &gt; string_length(text_lines[i])) 
      txt = text_lines[i]   
    else
      txt = string_copy(text_lines[i],0,n);
    n -= string_length(text_lines[i]);
    draw_text(txtx,txty,txt);
    txty += diag_sep;
  }
  
  // Draw the continue or yes/no image
  if (n &gt; 0) {
    downReady = 1;
    if (kind == 0) {
        // Windows &amp; Mac &amp; iOS
        if (os_type == os_windows || os_type == os_macosx || os_type == os_ios) {
            draw_sprite(spr_diag_continue,image_index,round(view_xview[view_current]+view_wview[view_current]-diag_hmargin-20),round(yy+diag_continue_y));
            }
        // PS4 and PS Vita
        if (os_type == os_ps4 || os_type == os_psvita) {
            if global.width / global.height == 1.5 {
                draw_sprite(spr_diag_continue,image_index,xx+diag_continue_x,yy+diag_continue_y);
                }
            if global.width / global.height &gt; 1.5 {
                draw_sprite(spr_diag_continue,image_index,xx+diag_continue_x+48,yy+diag_continue_y);
                }
            if global.width / global.height &lt; 1.5 {
                draw_sprite(spr_diag_continue,image_index,xx+diag_continue_x-32,yy+diag_continue_y);
                }
        }
      }
    else {
        // Windows &amp; Mac
        if (os_type == os_windows || os_type == os_macosx || os_type == os_ios) {
            var hOff1, hOff2;
            if global.width / global.height &lt; 1.5 {
                hOff1 = 20;
                hOff2 = 63;
                }
            if global.width / global.height == 1.5 {
                hOff1 = 20;
                hOff2 = 63;
                }
            if global.width / global.height &gt; 1.5 {
                if global.width / global.height &lt; 2 {
                    hOff1 = 40;
                    hOff2 = 83;
                    }
                if global.width / global.height &gt;= 2 {
                    hOff1 = 20;
                    hOff2 = 63;
                    }
                }
            draw_sprite(global.nSpr[global.ui],image_index,round(view_xview[view_current]+view_wview[view_current]-diag_hmargin-hOff1),round(yy+diag_no_y));
            draw_sprite(global.ySpr[global.ui],image_index,round(view_xview[view_current]+view_wview[view_current]-diag_hmargin-hOff2),round(yy+diag_yes_y));
            // Debug
            /*if YNKeyShown == 1 {
                draw_rectangle_colour(view_wview[global.deviceViewChange]-diag_hmargin-hOff1,yy+diag_no_y,view_wview[global.deviceViewChange]-diag_hmargin-hOff1+66,yy+diag_no_y+55,c_green,c_green,c_green,c_green,true);
                draw_rectangle_colour(view_wview[global.deviceViewChange]-diag_hmargin-hOff2-18,yy+diag_yes_y,view_wview[global.deviceViewChange]-diag_hmargin-hOff2-18+77,yy+diag_yes_y+55,c_yellow,c_yellow,c_yellow,c_yellow,true);
                }*/
            }
      // PS4
      if (os_type == os_ps4) {
        draw_sprite(spr_diag_yesnoPS4,image_index,xx+diag_yes_x,yy+diag_yes_y);
        }
      // PS Vita
      if (os_type == os_psvita) {
        draw_sprite(spr_diag_yesnoPSV,image_index,xx+diag_yes_x,yy+diag_yes_y);
        }
      // iOS
      /*if (os_type == os_ios || os_type == os_android) {
        if global.width / global.height == 1.5 {
            draw_sprite(spr_diag_no,image_index,xx+diag_no_x,yy+diag_no_y);
            draw_sprite(spr_diag_yes,image_index,xx+diag_yes_x,yy+diag_yes_y);
            }
        if global.width / global.height &gt; 1.5 {
            draw_sprite(spr_diag_no,image_index,xx+diag_no_x+48,yy+diag_no_y);
            draw_sprite(spr_diag_yes,image_index,xx+diag_yes_x+48,yy+diag_yes_y);
            }
        if global.width / global.height &lt; 1.5 {
            draw_sprite(spr_diag_no,image_index,xx+diag_no_x-32,yy+diag_no_y);
            draw_sprite(spr_diag_yes,image_index,xx+diag_yes_x-32,yy+diag_yes_y);
            }
        }*/
      }
     }
    else {
        downReady = 0;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set fullscreen mode with F4 (Windows/Mac)
if checkPads == 1 {
    if os_type == os_windows || os_type == os_macosx {
        if window_get_fullscreen() {
            window_set_fullscreen(false);
            window_set_size((display_get_width()*0.5),(display_get_height()*0.5));
            }
        else {
            window_set_fullscreen(true);
            }
            
        // resize stuff
        alarm[11] = 2;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="89">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Choose "Yes"
if global.mbleftPressed == 0 {
    if downReady == 1 {
      // Reset room speed in case user skipped text
      room_speed = 30;
      if YNKeyShown == 1 {
        virtual_key_delete(global.mobY);
        virtual_key_delete(global.mobN);
        }
      if (kind != 1) exit;
      diag_result = 1;
      instance_activate_all();
      if (call_instance &gt;= 0) 
        with (call_instance) event_perform(ev_other,other.call_event);
        if (os_type == os_ios || os_type == os_android) {
            global.dialogOn = 2;
            }
      instance_destroy();
        }
      }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Choose "No"
if global.mbleftPressed == 0 {
    if downReady == 1 {
      // Reset room speed in case user skipped text
      room_speed = 30;
      if YNKeyShown == 1 {
         virtual_key_delete(global.mobY);
         virtual_key_delete(global.mobN);
         }
      if (kind != 1) exit;
      diag_result = 0;
      instance_activate_all();
      if (call_instance &gt;= 0) 
        with (call_instance) event_perform(ev_other,other.call_event);
        if (os_type == os_ios || os_type == os_android) {
            global.dialogOn = 2;
            }
      instance_destroy();
        }
      }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Advance text box (keyboard only)
if global.mbleftPressed == 0 {
    if downReady == 1 {
        if chars_shown &gt; 0 {
            // Reset room speed in case user skipped text
            room_speed = 30;
            if downKeyShown == 1 {
                virtual_key_delete(global.mobDown);
                }
            
            if (kind != 0) exit;
            diag_result = 1;
            downReady = 0;
            instance_activate_all();
            if (call_instance &gt;= 0) 
                with (call_instance) event_perform(ev_other,other.call_event);
                if (os_type == os_ios || os_type == os_android) {
                    global.dialogOn = 2;
                    }
            instance_destroy();
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase room speed (text typing)
{
if downReady == 0 {
    room_speed = 60;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>14,14</point>
  </PhysicsShapePoints>
</object>
