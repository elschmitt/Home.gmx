<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9996</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Reset Idle Animation
idle = false;
lookingUp = false;
walkingNow = false;
movingLeft = false;
movingRight = false;
footstepPlay = 0;
stickRightPressed = 0;
stickLeftPressed = 0;
stickUp = 0;
stickRight = 0;
stickDown = 0;
stickLeft = 0;
lookUp = 0;
moveLeft = 0;
moveRight = 0;
mouseUp = 0;
mouseLeft = 0;
mouseRight = 0;
footCheck = 0;
upMouseCheck = 0;
Button1Pressed = false;
global.textBoxOn = 0;
alreadyHere = 0;
myNo = -1;
image_speed = 0.2;
// Create Flashlight
if !instance_exists(objFlashlight) {
    instance_create(self.x-40,self.y-68,objFlashlight);
    }
    
audio_listener_position(self.x,self.y,0);
audio_listener_orientation(0,1,0,0,0,1);

// Create instance counter for me
if (!instance_exists(self)) { myNo = 0; }
else { myNo = 1; }

/* Won't work in recent 1.4 versions of GM:S
if self.instance_count &lt; 1 {
    myNo = 0;
    }
if self.instance_count == 1 {
    myNo = 1;
    }
*/
    
    
if room == loadRoom {
    hspeed = 0;
    vspeed = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lock sticks
if stickUp == 1 {
    stickUp = 2;
    }
if stickDown == 1 {
    stickDown = 2;
    }
if stickLeft == 1 {
    stickLeft = 2;
    }
if stickRight == 1 {
    stickRight = 2;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lock mouse/touch
if mouseUp == 1 {
    mouseUp = 2;
    }
if mouseLeft == 1 {
    mouseLeft = 2;
    }
if mouseRight == 1 {
    mouseRight = 2;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset movingright
if movingRight == true {
    movingRight = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset movingleft
if movingLeft == true {
    movingLeft = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset lookingup
lookingUp = false;
lookUp = 0;
upMouseCheck = 0;
mouseUp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset footCheck, right SFX
footCheck = 0;

if audio_is_playing(footLeft) {
    audio_stop_sound(footLeft);
    }
if audio_is_playing(footRight) {
    audio_stop_sound(footRight);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset footCheck, left SFX
footCheck = 0;

if audio_is_playing(footLeft) {
    audio_stop_sound(footLeft);
    }
if audio_is_playing(footRight) {
    audio_stop_sound(footRight);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Textboxon = 0
global.textBoxOn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cue footstep sounds (again?)
if !instance_exists(objFootstepKiller) {
    if lookingUp == false {
        switch global.whichFloor {
            case 0: audio_play_sound(sndFootsteps2,1,0); break;
            case 1: audio_play_sound(sndFootsteps2concrete,1,0); break;
            case 2: audio_play_sound(sndFootsteps2grass,1,0); break;
            case 3: audio_play_sound(sndFootsteps2gravel,1,0); break;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset step animation, cue footstep sounds
if !instance_exists(objFootstepKiller) {
    if lookingUp == false {
        if sprite_index == sprPlayerWalk || sprite_index == sprPlayerWalkLimp || sprite_index == sprPlayerWalkLimp2 {
            image_index = 0;
            switch global.whichFloor {
                case 0: audio_play_sound(sndFootsteps1,1,0); break;
                case 1: audio_play_sound(sndFootsteps1concrete,1,0); break;
                case 2: audio_play_sound(sndFootsteps1grass,1,0); break;
                case 3: audio_play_sound(sndFootsteps1gravel,1,0); break;
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Nothing.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control for all platforms

// Gravity and Vspeed and Landing
if !instance_place(x,y+1,objBlock) &amp;&amp; !instance_exists(objFootstepKiller) {
    gravity = 1.5;
    }
if instance_place(x,y+1,objBlock) || instance_exists(objFootstepKiller) {
    gravity = 0;
    }
if vspeed &gt; 0 &amp;&amp; instance_place(x,y+vspeed,objBlock) {
    move_contact(270);
    vspeed = 0;
    }
    
audio_listener_position(self.x,self.y,0);

// Check analogue sticks
// Up
if gamepad_axis_value(global.whichPad,gp_axislv) &lt; -0.5 &amp;&amp; stickUp == 0 {
    stickUp = 1;
    alarm[11] = 1;
    stickRight = 0;
    stickLeft = 0;
    }
if gamepad_axis_value(global.whichPad,gp_axislv) &gt;= -0.5 &amp;&amp; stickUp == 2 {
    stickUp = 0;
    }
// Down
if gamepad_axis_value(global.whichPad,gp_axislv) &gt; 0.5 &amp;&amp; stickDown == 0 {
    stickDown = 1;
    alarm[11] = 1;
    }
if gamepad_axis_value(global.whichPad,gp_axislv) &lt;= 0.5 &amp;&amp; stickUp == 2  {
    stickDown = 0;
    }
// Left
if gamepad_axis_value(global.whichPad,gp_axislh) &lt; -0.5 &amp;&amp; stickLeft == 0 {
    if stickUp == 0 {
        stickLeft = 1;
        alarm[11] = 1;
        }
    }
if gamepad_axis_value(global.whichPad,gp_axislh) &gt;= -0.5 &amp;&amp; stickLeft == 2 {
    stickLeft = 0;
    }
// Right
if gamepad_axis_value(global.whichPad,gp_axislh) &gt; 0.5 &amp;&amp; stickRight == 0 {
    if stickUp == 0 {
        stickRight = 1;
        alarm[11] = 1;
        }
    }
if gamepad_axis_value(global.whichPad,gp_axislh) &lt;= 0.5 &amp;&amp; stickRight == 2 {
    stickRight = 0;
    }
// Mouse checks
if os_type != os_ps4 &amp;&amp; os_type != os_psvita { // Ignore on PS to avoid touchpad/screen presses
    if global.textBoxOn == 0 {
        if mouse_check_button(mb_left) {
            if mouse_y &gt; objPlayer.y-100 {
                // Left
                if mouse_x &lt; objPlayer.x-64 &amp;&amp; mouseLeft == 0 {
                    mouseUp = 0;
                    mouseLeft = 1;
                    mouseRight = 0;
                    }
                // Right
                if mouse_x &gt; objPlayer.x+64 &amp;&amp; mouseRight == 0 {
                    mouseUp = 0;
                    mouseRight = 1;
                    mouseLeft = 0;
                    }
                }
            // Up
            if mouse_y &lt; objPlayer.y-100 {
                if mouseUp == 0 {
                    mouseUp = 1;
                    mouseLeft = 0;
                    mouseRight = 0;
                    }
                }
            }
        }
    // Mouse release
    if (mouse_check_button_released(mb_left)) {
        // Sticky lookUp
        if mouse_y &lt; objPlayer.y-100 {
            if mouseUp == 1 {
                if upMouseCheck == 0 {
                    alarm[7] = 30;
                    upMouseCheck = 1;
                    }
                }
            }
        mouseLeft = 0;
        mouseRight = 0;
        }
    }
    
switch global.forceInputOR {
    case -1: {
        lookUp = max(keyboard_check(global.upKey),gamepad_button_check(global.whichPad,gp_padu),stickUp,mouseUp,0);
        moveLeft = max(keyboard_check(global.leftKey),gamepad_button_check(global.whichPad,gp_padl),stickLeft,mouseLeft,0);
        moveRight = max(keyboard_check(global.rightKey),gamepad_button_check(global.whichPad,gp_padr),stickRight,mouseRight,0);
        }; break;
    case 0: {
        lookUp = max(keyboard_check(global.upKey),0);
        moveLeft = max(keyboard_check(global.leftKey),0);
        moveRight = max(keyboard_check(global.rightKey),0);
        }; break;
    case 1: {
        lookUp = max(gamepad_button_check(global.whichPad,gp_padu),stickUp,0);
        moveLeft = max(gamepad_button_check(global.whichPad,gp_padl),stickLeft,0);
        moveRight = max(gamepad_button_check(global.whichPad,gp_padr),stickRight,0);
        }; break;
    case 2: {
        lookUp = max(gamepad_button_check(global.whichPad,gp_padu),stickUp,0);
        moveLeft = max(gamepad_button_check(global.whichPad,gp_padl),stickLeft,0);
        moveRight = max(gamepad_button_check(global.whichPad,gp_padr),stickRight,0);
        }; break;
    }


// Movement
if global.dialogOn != 1 {
    // Look Up
    if lookUp &gt; 0 {
        //if moveLeft == 0 &amp;&amp; moveRight == 0 { // removed to cancel walk
            hspeed = 0;
            sprite_index = sprPlayerUp;
            lookingUp = true;
        }
    // Move left
    if lookUp == 0 &amp;&amp; moveLeft &gt; 0 &amp;&amp; moveRight == 0 {
        switch global.playerLimp {
            case 0: {
                sprite_index = sprPlayerWalk;
                image_speed = 0.33;
                x-=6;
                }; break;
            case 1: {
                sprite_index = sprPlayerWalkLimp;
                image_speed = 0.3;
                x-=5;
                }; break;
            case 2: {
                sprite_index = sprPlayerWalkLimp2;
                image_speed = 0.2;
                x-=4;
                // Deal with limp
                if global.walkItOff &gt; 0 {
                    if !instance_exists(objFootstepKiller) {
                        global.walkItOff -= 1;
                        }
                    }
                }; break;
            }
            /*
        // CHEAT: run
        if global.testMode &gt;= 0 {
            if os_type == os_windows || os_type == os_macosx || os_type == os_ps4 {
                if keyboard_check(vk_shift) || gamepad_button_check(global.whichPad,gp_shoulderl) {
                    x-=64;
                    }
                }
            if os_type == os_psvita {
                if gamepad_button_check(global.whichPad,gp_shoulderl) {
                    x-=64;
                    }
                }
            }*/
        lookingUp = false;
        alarm[7] =-1;
        if footCheck == 0 {
            alarm[11] = 1;
            footCheck = 1;
            }
        }
    
    // Move right
    if lookUp == 0 &amp;&amp; moveLeft == 0 &amp;&amp; moveRight &gt; 0 {
        switch global.playerLimp {
            case 0: {
                sprite_index = sprPlayerWalk;
                image_speed = 0.33;
                x+=6;
                }; break;
            case 1: {
                sprite_index = sprPlayerWalkLimp;
                image_speed = 0.3;
                x+=5;
                }; break;
            case 2: {
                sprite_index = sprPlayerWalkLimp2;
                image_speed = 0.2;
                x+=4;
                // Deal with limp
                if global.walkItOff &gt; 0 {
                    if !instance_exists(objFootstepKiller) {
                        global.walkItOff -= 1;
                        }
                    }
                }; break;
            }
        /*
        // CHEAT: run
        if global.testMode &gt;= 0 {
            if os_type == os_windows || os_type == os_macosx || os_type == os_ps4 {
                if keyboard_check(vk_shift) || gamepad_button_check(global.whichPad,gp_shoulderl) {
                    x+=64;
                    }
                }
            if os_type == os_psvita {
                if gamepad_button_check(global.whichPad,gp_shoulderl) {
                    x+=64;
                    }
                }
            }
        */
        lookingUp = false;
        alarm[7] =-1;
        if footCheck == 0 {
            alarm[11] = 1;
            footCheck = 1;
            }
        }
    
    // Footsteps
    if !instance_exists(objFootstepKiller) {
        if sprite_index == sprPlayerWalk || sprite_index == sprPlayerWalkLimp || sprite_index == sprPlayerWalkLimp2 {
            if image_index &gt; 1 &amp;&amp; image_index &lt; 1.5 &amp;&amp; footstepPlay == 0 {
                if !audio_is_playing(footLeft) {
                    audio_play_sound(footLeft,3,0);
                    }
                footstepPlay = 1;
                } 
            if image_index &gt; 4 &amp;&amp; image_index &lt; 4.5 &amp;&amp; footstepPlay == 1 {
                if !audio_is_playing(footRight) {
                    audio_play_sound(footRight,3,0);
                    }
                footstepPlay = 0;
                } 
            }
        }
        
    // Stand &amp; Idle Animation
    if (x == xprevious) &amp;&amp; (y == yprevious) &amp;&amp; instance_place(x,y+1,objBlock) &amp;&amp; (lookUp == 0) {
        sprite_index = sprPlayer;
        image_speed = 0.2;
        if audio_is_playing(footLeft) {
            audio_stop_sound(footLeft);
            }
        if audio_is_playing(footRight) {
            audio_stop_sound(footRight);
            }
        footstepPlay = 0;
        alarm[1] =-1;
        alarm[2] =-1;
        }
        
    // Flip sprites if necessary
    if (x &gt; xprevious) {
        image_xscale = -1;
        }
    if (x &lt; xprevious) {
        image_xscale = 1;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//move_contact_solid(direction,1);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset stuff
stickUp = 0;
stickRight = 0;
stickDown = 0;
stickLeft = 0;
lookUp = 0;
moveLeft = 0;
moveRight = 0;
mouseUp = 0;
mouseLeft = 0;
mouseRight = 0;
footCheck = 0;
upMouseCheck = 0;
global.textBoxOn = 0;

// Define room's footsteps
switch global.whichFloor {
    case 0: {
        footLeft = sndFootsteps1;
        footRight = sndFootsteps2;
        }; break;
    case 1: {
        footLeft = sndFootsteps1concrete;
        footRight = sndFootsteps2concrete;
        }; break;
    case 2: {
        footLeft = sndFootsteps1grass;
        footRight = sndFootsteps2grass;
        }; break;
    case 3: {
        footLeft = sndFootsteps1gravel;
        footRight = sndFootsteps2gravel;
        }; break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lookingUp = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>64,128</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
