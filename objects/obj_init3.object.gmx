<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCTRL2</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set sizes

// Windows &amp; Mac
if (os_type == os_windows || os_type == os_macosx) {
    ww = display_get_width();
    hh = display_get_height();
    global.screenRes = 1080;
    global.deviceViewChange = 1;
    global.screenRatio = (round(ww/hh));
    global.device_w=display_get_width();
    global.device_h=display_get_height();
    global.height = display_get_height();
    global.width=round((global.device_w/global.device_h)*global.height);
    // 21:9 support
    if global.width / global.height &lt; 2 {
        surface_resize(application_surface,1920,1080);
        }
    if global.width / global.height &gt;= 2 {
        surface_resize(application_surface,display_get_width(),1080);
        }
    // Resize only if full-screen
    if window_get_fullscreen() {
        window_set_size(global.device_w,global.device_h);
        }
    display_set_gui_size(global.width,global.height);
    vs = 5;
    room_set_width(endCredits,global.width);
    room_set_height(endCredits,global.height);
    room_set_view(endCredits, 1, 1, 0, 0, global.width, global.height, 0, 0, global.device_w, global.device_h, global.width/2, global.height/2, 0, vs, objScrollToMe);
    texture_set_interpolation(true);
    }

// PS4, PS Vita
if os_type == os_ps4 || os_type == os_psvita {
    global.deviceViewChange = 1;
    if (os_type == os_ps4) {
        global.device_w=display_get_width();
        global.device_h=display_get_height();
        global.width = 1920;
        global.height = 1080;
        if global.debugMode == 0 {
            vs = 5;
            }
        if global.debugMode == 1 {
            vs = 55;
            }
        surface_resize(application_surface,global.width,global.height);
        }
    if (os_type == os_psvita) {
        global.device_w=display_get_width();
        global.device_h=display_get_height();
        global.width = 960;
        global.height = 544;
        if global.debugMode == 0 {
            vs = 5;
            }
        if global.debugMode == 1 {
            vs = 5;
            }
        surface_resize(application_surface,global.width,global.height);
        }
    display_set_gui_size(global.width,global.height);
    // Main Titles
    room_set_width(endCredits,global.width);
    room_set_height(endCredits,global.width*3.7);
    room_set_width(afterEndPS,global.width);
    room_set_height(afterEndPS,global.height);
    room_set_view(endCredits, 1, 1, 0, 0, global.width, global.height, 0, 0, global.device_w, global.device_h, global.width/2, global.height/2, 0, vs, objScrollToMe);
    room_set_view(afterEndPS, 1, 1, 0, 0, global.width, global.height, 0, 0, global.device_w, global.device_h, global.width/2, global.height/2, -1, -1, -1);
    }
    
// iOS    
if (os_type == os_ios) {
    global.deviceViewChange = 1;
    global.width = display_get_width();
    global.height = display_get_height();
    global.device_w=display_get_width();
    global.device_h=display_get_height();
    display_set_gui_size(global.width,global.height);
    global.Xcentre = global.width - (global.width/2);
    global.Ycentre = global.height - (global.height/2);
    surface_resize(application_surface,global.width,global.height);
    vs = 5;
    // Main Titles
    room_set_width(endCredits,global.width);
    room_set_height(endCredits,global.height);
    room_set_view(endCredits, 1, 1, 0, 0, global.width, global.height, 0, 0, global.device_w, global.device_h, global.width/2, global.height/2, 0, vs, objScrollToMe);
    room_set_view(afterEnd2, 1, 1, 0, 0, global.width, global.height, 0, 0, global.device_w, global.device_h, global.width/2, global.height/2, -1, -1, -1);
    }
/*
if os_type == os_android || os_type == os_ios {
    if (os_device == device_ios_ipad_retina || os_device == device_ios_ipad) {
        global.deviceViewChange = 1;
        global.device_w=display_get_width();
        global.device_h=display_get_height();
    
        switch os_device {
            case device_ios_ipad_retina: global.height = 1536; break;
            case device_ios_ipad: global.height = 768; break;
            }
        global.width=round((global.device_w/global.device_h)*global.height);
        }
        if (os_device == device_ios_iphone5) {
            global.deviceViewChange = 1;
            global.device_w=1136;
            global.device_h=640;
            global.width = 1136;
            global.height = 640;
            }
        if (os_device == device_ios_iphone_retina) {
            global.deviceViewChange = 1;
            global.device_w=960;
            global.device_h=640;
            global.width = 960;
            global.height = 640;
            }
        if (os_device == device_ios_iphone || os_device == device_ios_unknown) {
            global.deviceViewChange = 1;
            global.device_w=480;
            global.device_h=320;
            global.width = 480;
            global.height = 320;
            }
        // Main Titles
        room_set_width(endCredits,global.width);
        if (os_device == device_ios_iphone5) {
            room_set_height(endCredits,global.width*3.35);
            }
        else {
            room_set_height(endCredits,global.width*3.96);
            }
        // Vars
        var vs;
        switch os_device {
            case device_ios_ipad_retina: vs = 5; break;
            case device_ios_ipad: vs = 4; break;
            case device_ios_iphone5: vs = 2; break;
            case device_ios_iphone_retina: vs = 2; break;
            case device_ios_iphone: vs = 1; break;
            case device_ios_unknown: vs = 1; break;
            }
        room_set_view(endCredits, 1, 1, 0, 0, global.width, global.height, 0, 0, global.device_w, global.device_h, global.width/2, global.height/2, 0, vs, objScrollToMe);
        room_set_view(afterEnd2, 1, 1, 0, 0, global.width, global.height, 0, 0, global.device_w, global.device_h, global.width/2, global.height/2, -1, -1, -1);
    }*/
    
alarm[0] = 3;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//room_goto(afterEnd2);
room_goto(endCredits);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
