<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGUIpause</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-9999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial vars

alpha = 1;
alpha2 = 1;

cursorY = 0;
stickUp = 0;
stickRight = 0;
stickDown = 0;
stickLeft = 0;
xPressed = 0;

deactivateCheck = 0;
activateCheck = 0;
focusCheck = 0;
initCheck = 0;
exitCheck = 0;
checkInput = 0;

gameQuit = 0;

// 0 = main, 1 = "are you sure?", 2 = "quit to desktop confirm", 3 = options
menuLayer = 0;
menuChosen = 0;
menuFade = 1;
menuMax = 1;
menuInit = 0;
diagCheck = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lock sticks
if stickUp == 1 {
    stickUp =-1;
    }
if stickDown == 1 {
    stickDown =-1;
    }
if stickLeft == 1 {
    stickLeft =-1;
    }
if stickRight == 1 {
    stickRight =-1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back to quitToDesktop
audio_stop_all();
gameQuit = 1;
room_goto(quitToDesktop);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lock options
optionsOn = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill Pause menu, pop up objQuitter
if !instance_exists(objQuitter) {
    instance_create(0,0,objQuitter);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset menuChosen
menuChosen = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch to new menu
whichMenu = menuChosen;
mpos = 0;
menuFade = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// release xPressed
xPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back to quitGame
audio_stop_all();
gameQuit = 1;
//room_goto(quitGame);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Re-activate all
instance_activate_all();
checkInput = 0;
audio_resume_all();

// Reset lots of vars
cursorY = 0;
alpha = 1;
alpha2 = 1;
menuChosen = 0;
menuFade = 1;
stickUp = 0;
stickRight = 0;
stickDown = 0;
stickLeft = 0;
xPressed = 0;
diagCheck = 0;

global.pauseTimeout = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deactivate all
instance_deactivate_all(true);
checkInput = 1;
global.numClick = 0;
global.doubleClick = 0;

audio_pause_all();

// Turn off rumble
global.rumble = 0;
for (var i = 0; i &lt; gamepad_get_device_count(); i++) {
    if (gamepad_is_connected(i)) {
        gamepad_set_vibration(i,0,0);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input check
if checkInput == 1 {
    if global.guiOn == 1 {
        /// Input check
        if os_type == os_windows || os_type == os_macosx {
            if window_has_focus() {
                if !os_is_paused() {
                    scr_inputCheck();
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu controls

var move = 0;
var push = 0;

// Control pausability
if global.nowSaving == 0 &amp;&amp; global.nowLoading == 0 {
    if global.guiOn == 0 {
        if global.textBoxOn == 0 {
            if !instance_exists(objFadeIn) {
                if !instance_exists(objFadeOutLogo) {
                    if !instance_exists(objFadeOutNew) {
                        if !instance_exists(objFootstepKiller) {
                            if global.pauseReady == 1 {
                                if global.pauseTimeout == 0 {
                                    if instance_exists(objControl) {
                                        if objControl.alarm[10] =-1 {
                                            global.canPause = 1;
                                            }
                                        }
                                    }
                                if global.pauseTimeout != 0 {
                                    global.canPause = 0;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

if global.nowSaving == 1 || global.nowLoading == 1 || global.textBoxOn != 0 {
    global.canPause = 0;
    }
if instance_exists(objFootstepKiller) {
    global.canPause = 0;
    }
    
if global.pauseTimeout == 2 {
     if instance_exists(objControl) {
        objControl.alarm[10] = 10;
        global.pauseTimeout = 3;
        }
     }

// Just bring up objQuitter (PS4 / Vita)
if os_type == os_ps4 || os_type == os_psvita {
    if global.canPause == 1 {
        if !instance_exists(objQuitter) {
            if gamepad_button_check_pressed(global.whichPad,global.pauseButton) {
                instance_create(0,0,objQuitter);
                }
            }
        }
    }

// Pausing (Windows / Mac)    
if os_type == os_windows || os_type == os_macosx {
    // Disallow if saving/loading
    if global.canPause == 1 {
        // pause toggle (gamepad)
        if global.forceInputOR != 0 {
            if global.gpOn &gt; 0 {
                if gamepad_button_check_pressed(global.whichPad,global.pauseButton) {
                    // Toggle
                    global.guiOn = 1 - global.guiOn;
                    //alarm[5] = 8; // for saving options
                    menuFade = 1 - menuFade;
                    if menuFade &gt; 1 {
                        menuFade = 1;
                        }
                    menuChosen = 0;
                    toggle = 0;
                    whichOpt =-1;
                    whichMenu = 0;
                    cursorY = 0;
                    mpos = 0;
                    /*if optionsOn != 0 {
                        alarm[9] = 2;
                        }*/ // options not used
                    }
                }
            }
        // pause toggle (keyboard)
        if global.forceInputOR &lt; 1 {
            if keyboard_check_pressed(global.pauseKey) {
                // Toggle
                if menuChosen == 0 {
                    global.guiOn = 1 - global.guiOn;
                    }
                //alarm[5] = 8;
                menuFade = 1 - menuFade;
                if menuFade &gt; 1 {
                    menuFade = 1;
                    }
                menuChosen = 0;
                toggle = 0;
                whichOpt =-1;
                whichMenu = 0;
                cursorY = 0;
                mpos = 0;
                /*if optionsOn != 0 {
                    alarm[9] = 2;
                    }*/ // options not used
                }
            }
            
            
        // Open menu (and controls when menu is open)
        if global.guiOn == 1 {
            visible = true;
            if diagCheck == 0 {
                pause_show(); // used to ensure text appears
                diagCheck = 1;
                }
            // Fade in
            if menuFade == 1 {
                if alpha2 &lt; 1 {
                    alpha2 += 0.1;
                    }
                if alpha2 == 1 {
                    menuFade = 0;
                    }
                }
            // Fade out
            if menuFade == 2 {
                if alpha2 &gt; 0 {
                    alpha2 -= 0.1;
                    }
                if alpha2 == 0 {
                    menuFade = 0;
                    }
                }
            // De-activate
            if deactivateCheck == 0 {
                alarm[0] = 1;
                deactivateCheck = 1;
                }
            if activateCheck == 1 {
                activateCheck = 0;
                }
                
            // Keyboard control
            switch global.forceInputOR {
                case -1: {
                    push = max(keyboard_check_pressed(global.menuKey),gamepad_button_check_released(global.whichPad,global.xButton),0);
                    cancel = max(keyboard_check_pressed(global.backKey),gamepad_button_check_released(global.whichPad,global.crButton),0);
                    }; break;
                case 0: {
                    push = max(keyboard_check_pressed(global.menuKey),0);
                    cancel = max(keyboard_check_pressed(global.backKey),0);
                    }; break;
                case 1: {
                    push = max(gamepad_button_check_released(global.whichPad,global.xButton),0);
                    cancel = max(gamepad_button_check_released(global.whichPad,global.crButton),0);
                    }; break;
                case 2: {
                    push = max(gamepad_button_check_released(global.whichPad,global.xButton),0);
                    cancel = max(gamepad_button_check_released(global.whichPad,global.crButton),0);
                    }; break;
                }
            
            // Only allow if menu is faded in
            if menuFade == 0 {
                if optionsOn == 0 {
                    if whichOpt &lt; 0 { // for vertical main menus
                    
                        // Check analogue sticks
                        // Up
                        if gamepad_axis_value(global.whichPad,gp_axislv) &lt; -0.5 &amp;&amp; stickUp == 0 {
                            stickUp = 1;
                            alarm[11] = 1;
                            }
                        if gamepad_axis_value(global.whichPad,gp_axislv) &gt;= -0.5 &amp;&amp; stickUp =-1 {
                            stickUp = 0;
                            }
                        // Down
                        if gamepad_axis_value(global.whichPad,gp_axislv) &gt; 0.5 &amp;&amp; stickDown == 0 {
                            stickDown = 1;
                            alarm[11] = 1;
                            }
                        if gamepad_axis_value(global.whichPad,gp_axislv) &lt;= 0.5 &amp;&amp; stickDown =-1 {
                            stickDown = 0;
                            }
                        
                        switch global.forceInputOR {
                            case -1: {
                                move -= max(keyboard_check_pressed(global.upKey),keyboard_check_pressed(global.upKey2),gamepad_button_check_pressed(global.whichPad,gp_padu),stickUp,0);
                                move += max(keyboard_check_pressed(global.downKey),keyboard_check_pressed(global.downKey2),gamepad_button_check_pressed(global.whichPad,gp_padd),stickDown,0);
                                }; break;
                            case 0: {
                                move -= max(keyboard_check_pressed(global.upKey),keyboard_check_pressed(global.upKey2),0);
                                move += max(keyboard_check_pressed(global.downKey),keyboard_check_pressed(global.downKey2),0);
                                }; break;
                            case 1: {
                                move -= max(gamepad_button_check_pressed(global.whichPad,gp_padu),stickUp,0);
                                move += max(gamepad_button_check_pressed(global.whichPad,gp_padd),stickDown,0);
                                }; break;
                            case 2: {
                                move -= max(gamepad_button_check_pressed(global.whichPad,gp_padu),stickUp,0);
                                move += max(gamepad_button_check_pressed(global.whichPad,gp_padd),stickDown,0);
                                }; break;
                            }
                        if (move != 0) {
                            mpos += move;
                            
                            if (mpos &lt; 0) mpos = array_length_2d(menu,whichMenu) - 1;
                            if (mpos &gt; array_length_2d(menu,whichMenu) - 1) mpos = 0;
                
                            scr_keySound();
                            }
                        // Engage!    
                        if (push == 1) {
                            scr_menuGo();
                            }
                        // Back 
                        /*if (cancel == 1) {
                            scr_menuBack();
                            }*/
                        }
                    }
                    // Note: Options have been removed.
                }  
            }
            
         
        // Close menu  
        if global.guiOn == 0 {
            cursorY = 0;
            whichMenu = 0;
            // Resume game
            if activateCheck == 0 {
                alarm[1] = 1;
                activateCheck = 1;
                }
            if deactivateCheck == 1 {
                deactivateCheck = 0;
                }
            visible = false;
            }
        } 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init!

if room == logoTitle {
    scr_menuInit();
    menuInit = 1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// force pauseTimeout = 2
if global.nowSaving == 0 &amp;&amp; global.nowLoading == 0 {
    if global.guiOn == 0 {
        if global.textBoxOn == 0 {
            if !instance_exists(objFadeIn) {
                if !instance_exists(objFadeOutLogo) {
                    if !instance_exists(objFadeOutNew) {
                        if !instance_exists(objFootstepKiller) {
                            if global.pauseReady == 1 {
                                global.pauseTimeout = 2;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Prevent sprite draw

if global.guiOn == 1 {
    scr_debugText();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the dialog box, text, everything

{
    draw_set_alpha(1);
    draw_set_colour(c_white);
    // Screen area
    var xx,yy,ww,hh;
    if global.deviceViewChange == 0 {
        xx = view_xview[0];
        yy = view_yview[0];
        ww = view_wview[0];
        hh = view_hview[0];
        }
    if global.deviceViewChange == 1 {
        xx = view_xview[1];
        yy = view_yview[1];
        ww = view_wview[1];
        hh = view_hview[1];
        }
  
    // Text area
    var txtx,txty,txtw,bgW;
    txtx = round(xx + diag_hmargin);
    txtw = ww - (2*diag_hmargin);
    txty = round(yy + diag_vmargin);
    bgW = background_get_width(diag_background);
  
    // Draw the background
    draw_background_stretched(bgFill,xx,yy,ww,hh);
    draw_background_ext(diag_background,xx+((round(ww/2))-(round(bgW*2))),yy,4,4,0,c_white,1);
    
    // Draw the text
    var i,n,txt;
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    draw_set_font(font_diag);
    draw_set_alpha(alpha2);
    n = 200;
    
    /*for (i = 0; i &lt;= lines; i+=1)
    {
      if (n &gt; string_length(text_lines[i])) 
        txt = text_lines[i]   
      else
        txt = string_copy(text_lines[i],0,n);
      n -= string_length(text_lines[i]);
      draw_text(txtx,txty,txt);
      txty += diag_sep;
    }*/

    // Windows &amp; Mac
    if (os_type == os_windows || os_type == os_macosx) {
        var hOff1, hOff2;
        if global.width / global.height &lt; 1.5 {
            hOff1 = 20;
            hOff2 = 63;
            }
        if global.width / global.height == 1.5 {
            hOff1 = 20;
            hOff2 = 63;
            }
        if global.width / global.height &gt; 1.5 {
            if global.width / global.height &lt; 2 {
                hOff1 = 40;
                hOff2 = 83;
                }
            if global.width / global.height &gt;= 2 {
                hOff1 = 20;
                hOff2 = 63;
                }
            }
        
        // Draw menus
        if menuInit == 1 {
                   
            // Main Menu
            if whichMenu == 0 {
                // Dividers
                draw_rectangle_colour(txtx+32,txty+ll+round(ll*0.75),txtx+32+divW,txty+ll+round(ll*0.75)+2,mcol_on,mcol_on,mcol_on,mcol_on,false);
                draw_rectangle_colour(txtx+32,txty+(ll*3)+round(ll*0.75),txtx+32+divW,txty+(ll*3)+round(ll*0.75)+2,mcol_on,mcol_on,mcol_on,mcol_on,false);
                // Select
                draw_text_ext_colour(txtx+32,diag_vmargin+(ll*8),string(global.txt_ui_select),ll,txtw,mcol_on,mcol_on,mcol_on,mcol_on,alpha2);
                // A / X / SPACE
                draw_sprite(global.selSpr[global.ui],0,txtx+32+string_width(global.txt_ui_select),diag_vmargin+(ll*8)+6);
                }
            // Return to title? / Quit?
            if whichMenu == 2 || whichMenu == 3 {
                // Nothing.
                }
                
            // Build menu list based on whichMenu
            var m;
            for (m = 0; m &lt; array_length_2d(menu,whichMenu); m +=1) {
                //
                if mpos == m {
                    // Highlight
                    draw_set_alpha(alpha2);
                    draw_sprite(sprGUImenuBall,0,txtx+16,txty+(m*pp)+16);
                    draw_text_ext_colour(txtx+32,txty+(m*pp),string(menu[whichMenu,m]),ll,txtw,mcol_on,mcol_on,mcol_on,mcol_on,alpha2);
                    }
                else {
                    draw_text_ext_colour(txtx+32,txty+(m*pp),string(menu[whichMenu,m]),ll,txtw,mcol_off,mcol_off,mcol_off,mcol_off,alpha2);
                    }
                }
            }
        }
        draw_set_alpha(1);
        draw_set_colour(c_white);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
