<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSoundCTRL</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Defaults
globalSetting = 99;
silent = 99;
useSound = sndNothing;
useSound2 = sndNothing;
loopMe = 0;
quiet = 0;
quiet2 = 0;
thisRoomSFX = 99;
setVolume = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play designated sound
if useSound != sndNothing {
    if !audio_is_playing(useSound) {
        audio_play_sound(useSound,1,loopMe);
        if quiet == 1 {
            audio_sound_gain(useSound,0.5,0);
            }
        if setVolume != 99 {
            audio_sound_gain(useSound,setVolume,0);
            }
        }
    }
// Duplicate for more than one sound
if useSound2 != sndNothing {
    if !audio_is_playing(useSound2) {
        audio_play_sound(useSound2,2,loopMe);
        if quiet2 == 1 {
            audio_sound_gain(useSound2,0.75,0);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(objFootstepKiller) || room != loadRoom {
    if thisRoomSFX != 99 {
        if (thisRoomSFX == 1) {
            sound_stop(useSound);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get current room name
//myRoom = room_get_name(room);

// Room by room parameters
if !instance_exists(objFootstepKiller) {
    switch room {
        // House
        case houseStart:
        case houseTop02: 
        case houseTop01: 
        case houseMid01:
        case houseMid02:
        case houseMid03: 
        case houseBtm02:
        case houseBtm03: 
        case houseBath: 
        case houseKitchen: {
            useSound = BGMtest2;
            loopMe = 1;
            setVolume = 0.75;
            }; break;
        // Tunnel
        case tunnelTop01: 
        case tunnelMid101: 
        case tunnelMid102: 
        case tunnelMid201: 
        case tunnelMid202: 
        case tunnelMid204: 
        case tunnelBtm02: {
            loopMe = 1;
            useSound = sndAMBtunnel1;
            setVolume = 0.5;
            }; break;
        //case tunnelBtm03: break; &lt;-- not needed
        // Sewers
        case SewersMid201: 
        case SewersMid202: 
        case SewersMid203: 
        case SewersMid204: 
        case SewersMid205: 
        case SewersMid103: 
        case SewersMid104: 
        case SewersMid105: 
        case SewersTop01: 
        case SewersTop02: 
        case SewersSecret: 
        case SewersBtm03: 
        case SewersBtm04: 
        case SewersBtm202: 
        case SewersBtm201: {
            loopMe = 1;
            useSound = sndAMBSewers;
            setVolume = 0.6;
            }; break;
        // Water Tower
        case wtBtm02: 
        case wtBtm01: 
        case wtMid101: 
        case wtMid201: {
            loopMe = 1;
            useSound = sndAMBwatertower;
            }; break;
        // Trainyard
        case trainEntrance: 
        case trainOutside: {
            useSound = sndAMBwatertower;
            useSound2 = sndWind1;
            thisRoomSFX = 1;
            loopMe = 1;
            }; break;
        case trainMainRoom: 
        case trainBooth: 
        case trainMap: {
            loopMe = 1;
            useSound = sndWind2;
            }; break;
        // Forest
        case forestBtmEntrance: 
        case forestMid02:
        case forestMid01:
        case forestCave: 
        case forestExit:
        case forestCamp:
        case forestRiver01: 
        case forestRiver02: {
            loopMe = 1;
            useSound = sndAMBwatertower;
            setVolume = 0.4;
            }; break;
        //case forestWashroom: ; break; &lt;-- not needed
        // Factory
        //case factorybtmOut1:
        case factorybtmOut3: {
            useSound = sndAMBwatertower;
            loopMe = 1;
            }; break;
        case factoryBtmIn2:
        case factoryBtmIn1: 
        case factoryMid01: 
        case factoryMid02:
        case factoryMid03:
        case factoryFloor:
        case factoryTop01:
        case factoryTop02:
        case factoryTop03:
        case factoryTop04: {
            if !instance_exists(objFactorySound) {
                instance_create(32,32,objFactorySound);
                }
            if audio_is_playing(sndAMBwatertower) {
                audio_stop_sound(sndAMBwatertower);
                }
            }; break;
        // Store
        case storeBtmEntrance: {
            useSound = sndAMBwatertower;
            loopMe = 1;
            thisRoomSFX = 1;
            setVolume = 0.3;
            }; break;
        case storeBtm02: 
        case storeBtm01: 
        case storeMid01: 
        case storeMid02: 
        case storeMid03: 
        case storeMid04: 
        case storeTop: {
            useSound = BGMtest2;
            loopMe = 1;
            setVolume = 0.2;
            }; break;
        // Road
        case road01: 
        case pathForestFactory: 
        case roadToStore1:
        case road02: 
        case roadToStore2: {
            loopMe = 1;
            useSound = sndAMBwatertower;
            }; break;
        // Home
        case homePath: 
        case homeEntrance: 
        case homebackYard: {
            useSound = BGMtest2;
            loopMe = 1;
            setVolume = 0.75;
            }; break;
        case homeBtm01: 
        case homeBtm02:
        case homeBath: 
        case homeMid101: 
        case homeMid102:
        case homeMid103: 
        case homeMid201: 
        case homeMid202: 
        case homeMid203: {
            useSound = BGMtest2;
            loopMe = 1;
            quiet = 1;
            useSound2 = sndTunnelCresc;
            quiet2 = 0;
            loopMe = 1;
            }; break;
        case homeBsmt01: {
            useSound2 = sndTunnelCresc;
            quiet2 = 0;
            loopMe = 1;
            }; break;
        //case homeBsmt02: ; break; &lt;&lt;-- not needed
        // Alt Home
        case altBtm01: 
        case altBtm02:
        case altMid101: 
        case altMid102: 
        case altMid103: 
        case altMid201: 
        case altMid202: 
        case altMid203:
        case altBsmt02:
        case altBath: {
            useSound2 = sndTunnelCresc;
            quiet2 = 0;
            loopMe = 1;
            }; break;
        }
    }

// Reset unwanted sounds
if instance_exists(objFootstepKiller) {
    useSound = sndNothing;
    useSound2 = sndNothing;
    quiet = 0;
    quiet2 = 0;
    loopMe = 0;
    }

alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
