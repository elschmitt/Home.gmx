<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSoundAmbient</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ambSound = sndNothing;
ambSound2 = sndNothing;
ambSound3 = sndNothing;
useSound = sndNothing;
quiet = 99;
silent = 99;
globalSetting = 99;
setVolume = 99;
carryMe = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Turn off sound for Sewer Valves
// Valve 1
if instance_exists((inst_B2036B08)) {
    if (inst_B2036B08).image_index == 1 {
        audio_stop_sound(sndAMBvalves);
        }
    }
// Valve 2
if instance_exists((inst_8282A86D)) {
    if (inst_8282A86D).image_index == 2 {
        audio_stop_sound(sndAMBvalves);
        }
    }  
// Valve 3
if instance_exists((inst_59A9F82A)) {
    if (inst_59A9F82A).image_index == 3 {
        audio_stop_sound(sndAMBvalves);
        }
    }   
// Valve 4
if instance_exists((inst_F8EB1B35)) {
    if (inst_F8EB1B35).image_index == 1 {
        if ambSound2 != sndNothing {
            audio_stop_sound(ambSound2);
            }
        }
    }
    
// Turn off sound for Factory Switches
// Switch 1
if instance_exists((inst_F5540572)) {
    if (inst_F5540572).image_index == 8 {
        if ambsound != sndNothing {
            audio_play_sound(ambSound,2,1);
            }
        }
    }
// Switch 2
if instance_exists((inst_144A380E)) {
    if (inst_144A380E).image_index == 6 {
        if ambSound2 != sndNothing {
            audio_play_sound(ambSound2,3,1);
            }
        }
    }  
// Switch 3
if instance_exists((inst_97034121)) {
    if (inst_97034121).image_index == 7 {
        audio_play_sound(sndAmbPowerSwitch,2,1);
        }
    }
// Switch 4
if instance_exists((inst_4A58EF85)) {
    if (inst_4A58EF85).image_index == 7 {
        if ambSound != sndNothing {
            audio_play_sound(ambSound,2,1);
            }
        }
    }   
// Switch 5
if instance_exists((inst_A47DFF43)) {
    if (inst_A47DFF43).image_index == 8 {
        if ambSound2 != sndNothing {
            audio_play_sound(ambSound2,3,1);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Ambient sound
if ambSound != sndNothing {
    if quiet != 99 {
        if quiet == 0 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 320 {
                audio_sound_gain(ambSound,0.7,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 160 {
                audio_sound_gain(ambSound,0.75,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 64 {
                audio_sound_gain(ambSound,0.8,0);
                }
            }
        if quiet == 1 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 320 {
                audio_sound_gain(ambSound,0.4,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 160 {
                audio_sound_gain(ambSound,0.45,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 64 {
                audio_sound_gain(ambSound,0.5,0);
                }
            }
        if quiet == 3 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 1376 {
                audio_sound_gain(ambSound,0.5,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 688 {
                audio_sound_gain(ambSound,0.75,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 320 {
                audio_sound_gain(ambSound,1,0);
                }
            }
        }
    }
// Duplicate for multiple instances
if ambSound2 != sndNothing {
    if quiet != 99 {
        if quiet == 0 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 320 {
                audio_sound_gain(ambSound2,0.7,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 160 {
                audio_sound_gain(ambSound2,0.75,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 64 {
                audio_sound_gain(ambSound2,0.8,0);
                }
            }
        if quiet == 1 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 320 {
                audio_sound_gain(ambSound2,0.4,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 160 {
                audio_sound_gain(ambSound2,0.45,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 64 {
                audio_sound_gain(ambSound2,0.5,0);
                }
            }
        if quiet == 3 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 928 {
                audio_sound_gain(ambSound2,0.7,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 464 {
                audio_sound_gain(ambSound2,0.75,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 64 {
                audio_sound_gain(ambSound2,0.8,0);
                }
            }
        }
    }
// Duplicate again for multiple instances
if ambSound3 != sndNothing {
    if quiet != 99 {
        if quiet == 0 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 320 {
                audio_sound_gain(ambSound3,0.7,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 160 {
                audio_sound_gain(ambSound3,0.75,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 64 {
                audio_sound_gain(ambSound3,0.75,0);
                }
            }
        if quiet == 1 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 320 {
                audio_sound_gain(ambSound3,0.4,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 160 {
                audio_sound_gain(ambSound3,0.45,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 64 {
                audio_sound_gain(ambSound3,0.5,0);
                }
            }
        if quiet == 3 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 928 {
                audio_sound_gain(ambSound3,0.7,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 464 {
                audio_sound_gain(ambSound3,0.75,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 64 {
                audio_sound_gain(ambSound3,0.8,0);
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Stop sound when exiting room
if ambSound != sndNothing {
    audio_stop_sound(ambSound);
    }
if ambSound2 != sndNothing {
    audio_stop_sound(ambSound2);
    }
if useSound != sndNothing {
    audio_stop_sound(useSound);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destroy if a one-time event
if globalSetting != 99 {
    if globalSetting == 1 {
        instance_destroy();
    }
}

// Reset ambient sound (if it exists) and set it to be quiet
if ambSound != sndNothing {
    if quiet != 99 {
        if quiet == 0 {
            audio_play_sound(ambSound,2,1);
            audio_sound_gain(ambSound,0.5,0);
            }
        if quiet == 1 {
            audio_play_sound(ambSound,2,1);
            audio_sound_gain(ambSound,0.2,0);
            }
        if quiet == 3 {
            // When player approaches
            if distance_to_object(objPlayer) &lt; 1376 {
                audio_sound_gain(ambSound,0.5,0);
                }
            // When player is closer
            if distance_to_object(objPlayer) &lt; 688 {
                audio_sound_gain(ambSound,0.75,0);
                }
            // When player is really close
            if distance_to_object(objPlayer) &lt; 320 {
                audio_sound_gain(ambSound,1,0);
                }
            }
        }
    if silent != 99 {
        if silent == 1 {
            audio_play_sound(ambSound,2,1);
            audio_sound_gain(ambSound,0,0);
            }
        }
    }
//Another variable to allow two of the same object in one room
if ambSound2 != sndNothing {
    if quiet != 99 {
        if quiet == 0 {
            audio_play_sound(ambSound2,2,1);
            audio_sound_gain(ambSound2,0.5,0);
            }
        if quiet == 1 {
            audio_play_sound(ambSound2,2,1);
            audio_sound_gain(ambSound2,0.2,0);
            }
        }
    if silent != 99 {
        if silent == 1 {
            audio_play_sound(ambSound2,2,1);
            audio_sound_gain(ambSound2,0,0);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
